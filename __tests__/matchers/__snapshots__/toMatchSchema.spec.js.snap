// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toMatchSchema custom formats bcp47 it does not match 123 1`] = `
"expect(received).toMatchSchema(schema)

received
  /locale must match format \\"bcp47\\"
"
`;

exports[`toMatchSchema custom formats bcp47 it does not match EN-US 1`] = `
"expect(received).toMatchSchema(schema)

received
  /locale must match format \\"bcp47\\"
"
`;

exports[`toMatchSchema custom formats bcp47 it does not match en_US 1`] = `
"expect(received).toMatchSchema(schema)

received
  /locale must match format \\"bcp47\\"
"
`;

exports[`toMatchSchema custom formats bcp47 it does not match en-us 1`] = `
"expect(received).toMatchSchema(schema)

received
  /locale must match format \\"bcp47\\"
"
`;

exports[`toMatchSchema custom formats bcp47 it does not match enus 1`] = `
"expect(received).toMatchSchema(schema)

received
  /locale must match format \\"bcp47\\"
"
`;

exports[`toMatchSchema custom keywords instanceof 1`] = `
"expect(received).toMatchSchema(schema)

received
  must pass \\"instanceof\\" keyword validation
    Expected: <string> Array
    Path:     #/instanceof
"
`;

exports[`toMatchSchema custom keywords typeof 1`] = `
"expect(received).toMatchSchema(schema)

received
  must pass \\"typeof\\" keyword validation
    Expected: <string> string
    Path:     #/typeof
"
`;

exports[`toMatchSchema does not crash on circular references 1`] = `
"expect(received).toMatchSchema(schema)

received
  /hello must be string
"
`;

exports[`toMatchSchema fails for matching schema when using .not 1`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

"
`;

exports[`toMatchSchema fails for missing required keys 1`] = `
"expect(received).toMatchSchema(schema)

received
  must have required property 'hello'
"
`;

exports[`toMatchSchema fails for wrong type 1`] = `
"expect(received).toMatchSchema(schema)

received
  /hello must be string
"
`;

exports[`toMatchSchema fails when additional properties are found but forbidden 1`] = `
"expect(received).toMatchSchema(schema)

received
  must NOT have additional properties, but found 'another'
"
`;

exports[`toMatchSchema fails when pattern does not match 1`] = `
"expect(received).toMatchSchema(schema)

received
  /hello must match pattern \\"[a-z]+\\"
"
`;

exports[`toMatchSchema includes the description in the error when provided 1`] = `
"expect(received).toMatchSchema(schema)

en-US language pack
  /hello must be string
"
`;

exports[`toMatchSchema output verbose errors should display schema $id in the schema path 1`] = `
"expect(received).toMatchSchema(schema)

received
  /test must be number
    Received: <string> 123
    Path:     testSchema#/allOf/0/properties/test/type
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 1`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<null>
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 2`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<boolean> true
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 3`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<number> 1
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 4`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<string> this is valid but expect().not.toMatchSchema has been used
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 5`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<object> {}
"
`;

exports[`toMatchSchema output verbose errors should output an error with only the received input printed 6`] = `
"expect(received).not.toMatchSchema(schema)

Expected value not to match schema

received
<array> [\\"this is valid but expect().not.toMatchSchema has been used\\"]
"
`;

exports[`toMatchSchema output verbose errors should output error with details printed per errored property 1`] = `
"expect(received).toMatchSchema(schema)

received
  must NOT have more than 1 items
    Path:     #/allOf/0/maxProperties
  must NOT have fewer than 999 items
    Path:     #/allOf/0/minProperties
  must have required property 'testRequired'
    Path:     #/allOf/0/required
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  must match pattern \\"^false\\"
    Path:     #/allOf/0/propertyNames/pattern
  property name must be valid
    Expected: {\\"pattern\\":\\"^false\\"}
    Path:     #/allOf/0/propertyNames
  /testType must be null
    Received: <boolean> false
    Path:     #/allOf/0/properties/testType/type
  /testNotEmpty must NOT have fewer than 1 characters
    Received: <empty string>
    Path:     #/allOf/0/properties/testNotEmpty/minLength
  /testEnum must be equal to one of the allowed values
    Expected: [1,2]
    Received: <boolean> false
    Path:     #/allOf/0/properties/testEnum/enum
  /testConst must be equal to constant
    Expected: <boolean> true
    Received: <boolean> false
    Path:     #/allOf/0/properties/testConst/const
  /testFormat must match format \\"email\\"
    Received: <string> test
    Path:     #/allOf/0/properties/testFormat/format
  /testPattern must match pattern \\"[0-9]+\\"
    Received: <string> test
    Path:     #/allOf/0/properties/testPattern/pattern
  /testItems must NOT have more than 1 items
    Received: <array> [false,1]
    Path:     #/allOf/0/properties/testItems/maxItems
  /testItems must NOT have fewer than 5 items
    Received: <array> [false,1]
    Path:     #/allOf/0/properties/testItems/minItems
  /testItems/0 must be equal to constant
    Expected: <boolean> true
    Received: <boolean> false
    Path:     #/allOf/0/properties/testItems/items/const
  /testItems/1 must be equal to constant
    Expected: <boolean> true
    Received: <number> 1
    Path:     #/allOf/0/properties/testItems/items/const
  /testItems/0 must be equal to constant
    Expected: <boolean> true
    Received: <boolean> false
    Path:     #/allOf/0/properties/testItems/contains/const
  /testItems/1 must be equal to constant
    Expected: <boolean> true
    Received: <number> 1
    Path:     #/allOf/0/properties/testItems/contains/const
  /testItems must contain at least 1 valid item(s)
    Expected: {\\"const\\":true}
    Received: <array> [false,1]
    Path:     #/allOf/0/properties/testItems/contains
  /testNumber must be <= 0
    Received: <number> 1
    Path:     #/allOf/0/properties/testNumber/maximum
  /testNumber must be >= 999
    Received: <number> 1
    Path:     #/allOf/0/properties/testNumber/minimum
  /testNumber must be < 1
    Received: <number> 1
    Path:     #/allOf/0/properties/testNumber/exclusiveMaximum
  /testNumber must be > 999
    Received: <number> 1
    Path:     #/allOf/0/properties/testNumber/exclusiveMinimum
  /testNumber must be multiple of 5
    Received: <number> 1
    Path:     #/allOf/0/properties/testNumber/multipleOf
  /testThen must be equal to constant
    Expected: <boolean> true
    Received: <null>
    Path:     #/allOf/1/then/properties/testThen/const
  must match \\"then\\" schema
    Expected: {\\"type\\":\\"object\\",\\"properties\\":{\\"testThen\\":{\\"const\\":true}}}
    Received: {\\"testType\\":false,\\"testNotEmpty\\":\\"\\",\\"testEnum\\":false,\\"testConst\\":false,\\"testFormat\\":\\"test\\",\\"testPattern\\":\\"test\\",\\"testItems\\":[false,1],\\"testNumber\\":1,\\"testIf\\":true,\\"testThen\\":null}
    Path:     #/allOf/1/if
  must NOT be valid
    Expected: {\\"type\\":\\"object\\"}
    Received: {\\"testType\\":false,\\"testNotEmpty\\":\\"\\",\\"testEnum\\":false,\\"testConst\\":false,\\"testFormat\\":\\"test\\",\\"testPattern\\":\\"test\\",\\"testItems\\":[false,1],\\"testNumber\\":1,\\"testIf\\":true,\\"testThen\\":null}
    Path:     #/allOf/2/not
"
`;
